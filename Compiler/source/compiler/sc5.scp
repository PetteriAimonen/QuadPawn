/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2011
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not
 *  use this file except in compliance with the License. You may obtain a copy
 *  of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  License for the specific language governing permissions and limitations
 *  under the License.
 *
 *  Version: $Id: sc5.sch 4535 2011-07-07 09:15:22Z thiadmer $
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {111,110}, {105,110}, {116,32}, {97,114}, {100,32}, {116,105}, {115,32}, {101,114}, {37,115}, {134,129}, {97,108}, {34,137}, {140,34}, {101,110}, {117,110},
  {121,32}, {115,105}, {114,101}, {97,116}, {110,111}, {111,114}, {97,110}, {101,133}, {32,141}, {109,142}, {115,116}, {109,98}, {100,101}, {114,97}, {98,108}, {138,32},
  {143,99}, {102,160}, {111,108}, {148,131}, {118,139}, {132,157}, {115,121}, {166,155}, {167,162}, {117,115}, {97,32}, {105,133}, {115,145}, {149,32}, {165,144}, {103,32},
  {164,171}, {97,158}, {130,176}, {116,104}, {101,120}, {117,153}, {161,159}, {103,181}, {132,183}, {156,102}, {101,100}, {111,102}, {136,32}, {99,104}, {118,132}, {168,152},
  {105,177}, {190,192}, {109,97}, {116,111}, {99,129}, {101,135}, {105,135}, {112,146}, {187,32}, {185,130}, {98,128}, {169,131}, {184,131}, {154,147}, {44,32}, {191,41},
  {109,203}, {40,207}, {105,99}, {130,175}, {115,117}, {145,122}, {193,128}, {109,147}, {58,152}, {34,32}, {129,32}, {139,32}, {104,97}, {100,105}, {101,108}, {110,32},
  {130,32}, {97,99}, {108,111}, {111,112}, {150,131}, {161,138}, {102,149}, {196,154}, {208,202}, {102,105}, {99,111}, {118,128}, {227,136}, {194,144}, {150,32}, {199,172},
  {116,97}, {119,105}, {97,109}, {180,239}, {100,111}, {109,112}, {97,115}, {110,117}, {108,128}, {116,136}, {247,155}, {250,188}, {117,108}, {101,115}, {179,128}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*000*/  "*",   /* scpack does not like empty strings */
/*001*/  "expected token: \"%s\", but found \"%s\"",
/*002*/  "only a single statement (or expression) can follow each \"case\"",
/*003*/  "declaration of a local variable must appear in a compound block",
/*004*/  "function \"%s\" is not implemented",
/*005*/  "function may not have arguments",
/*006*/  "must be assigned to an array",
/*007*/  "operator cannot be redefined",
/*008*/  "must be a constant expression; assumed zero",
/*009*/  "invalid array size (negative, zero or out of bounds)",
/*010*/  "invalid function or declaration",
/*011*/  "invalid outside functions",
/*012*/  "invalid function call, not a valid address",
/*013*/  "no entry point (no public functions)",
/*014*/  "invalid statement; not in switch",
/*015*/  "\"default\" case must be the last case in switch statement",
/*016*/  "multiple defaults in \"switch\"",
/*017*/  "undefined symbol \"%s\"",
/*018*/  "initialization data exceeds declared size",
/*019*/  "not a label: \"%s\"",
/*020*/  "invalid symbol name \"%s\"",
/*021*/  "symbol already defined: \"%s\"",
/*022*/  "must be lvalue (non-constant)",
/*023*/  "array assignment must be simple assignment",
/*024*/  "\"break\" or \"continue\" is out of context",
/*025*/  "function heading differs from prototype",
/*026*/  "no matching \"#if...\"",
/*027*/  "invalid character constant",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"",
/*029*/  "invalid expression, assumed zero",
/*030*/  "compound statement not closed at the end of file (started at line %d)",
/*031*/  "unknown directive",
/*032*/  "array index out of bounds (variable \"%s\")",
/*033*/  "array must be indexed (variable \"%s\")",
/*034*/  "argument does not have a default value (argument %d)",
/*035*/  "argument type mismatch (argument %d)",
/*036*/  "empty statement",
/*037*/  "invalid string (possibly non-terminated string)",
/*038*/  "extra characters on line",
/*039*/  "constant symbol has no size",
/*040*/  "duplicate \"case\" label (value %d)",
/*041*/  "invalid ellipsis, array size is not known",
/*042*/  "invalid combination of class specifiers",
/*043*/  "character constant %ld exceeds range for a packed string/array",
/*044*/  "positional parameters must precede all named parameters",
/*045*/  "too many function arguments",
/*046*/  "unknown array size (variable \"%s\")",
/*047*/  "array sizes/definitions do not match, or destination array is too small",
/*048*/  "array dimensions do not match",
/*049*/  "invalid line continuation",
/*050*/  "invalid range",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions and for named indices",
/*052*/  "multi-dimensional arrays must be fully initialized",
/*053*/  "exceeding maximum number of dimensions",
/*054*/  "unmatched closing brace (\"}\")",
/*055*/  "start of function body without function header",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")",
/*057*/  "unfinished expression before compiler directive",
/*058*/  "duplicate argument; same argument is passed twice",
/*059*/  "function argument may not have a default value (variable \"%s\")",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive",
/*062*/  "number of operands does not fit the operator",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"",
/*064*/  "cannot change predefined operators",
/*065*/  "function argument may only have a single tag (argument %d)",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")",
/*068*/  "invalid rational number precision in #pragma",
/*069*/  "rational number format already defined",
/*070*/  "rational number support was not enabled",
/*071*/  "user-defined operator must be declared before use (function \"%s\")",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols",
/*073*/  "function argument must be an array (argument \"%s\")",
/*074*/  "#define pattern must start with an alphabetic character",
/*075*/  "input line too long (after substitutions)",
/*076*/  "syntax error in the expression, or invalid function call",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s",
/*078*/  "function uses both \"return\" and \"return <value>\"",
/*079*/  "inconsistent return types (array & non-array)",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")",
/*081*/  "reserved",
/*082*/  "user-defined operators and native functions may not have states",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")",
/*085*/  "no states are defined for symbol \"%s\"",
/*086*/  "unknown automaton \"%s\"",
/*087*/  "unknown state \"%s\" for automaton \"%s\"",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")",
/*089*/  "state variables may not be initialized (symbol \"%s\")",
/*090*/  "public functions may not return arrays (symbol \"%s\")",
/*091*/  "first constant in an enumerated list must be initialized (symbol \"%s\")",
/*092*/  "invalid number format",
/*093*/  "array fields with a size may only appear in the final dimension",
/*094*/  "invalid subscript, subscript does not match array definition regarding named indices (symbol \"%s\")"
#else
  "*",
  "\264pect\227\303k\216\330\316bu\203fo\217\205\215",
  "\201l\220\252s\202g\370\315e\231\203(\255\363\201) c\356f\242\342w ea\275 \042c\366e\042",
  "\234cl\204a\237\310\252\342c\333\326\320appe\204 \340\252\352\365o\217\205\236ock",
  "\345\230 \306\243i\365le\231t\272",
  "\266\355\243\334\353\270ts",
  "\350a\254gn\227\303 \356\245y",
  "\354\223\255c\226\243\312\222\311\272",
  "\350\252\347\344\363\201; \366\324m\227z\210o",
  "\262\256\325\200(nega\206ve\316z\210o \255ou\203\310bo\217ds)",
  "\262\266\255\234cl\204a\212",
  "\262out\221d\200\345s",
  "\262\266c\213l\316\243\252\260add\222ss",
  "\224 \216tr\220po\202\203(\224 pu\236\322 \345s)",
  "\262\315e\231t; \243\340s\361t\275",
  "\042\271a\374t\331c\366\200\350\376l\366\203c\366\200\340s\361t\275 \315e\231t",
  "m\374\206p\370\271a\374t\207\340\042s\361t\275\042",
  "\217\311\227\277",
  "\202i\206\213iza\237d\223\252\264ce\272\207\234cl\204\227\325e",
  "\243\252lab\336\330",
  "\262\250 n\362\200\215",
  "\250 \213\222ad\220\311\272\330",
  "\350l\244u\200(n\201-\347\226t)",
  "\256a\254gn\231\203\350\221\365\370a\254gn\231t",
  "\042b\222ak\331\255\042\304t\202ue\331\306ou\203\310\304t\264t",
  "\266head\323\335ff\210\207from pro\303type",
  "\224 \327\275\323\042#if...\042",
  "\262\275\204\341t\274\347\226t",
  "\262\324bscrip\203(\243\356\256\255\303o m\226\220\324bscripts)\330",
  "\262\363\201\316\366\324m\227z\210o",
  "\352\365o\217\205\315e\231\203\243c\342s\227a\203\376\216\205\310\351\370(\232\204t\227a\203l\202\200%d)",
  "\217k\224w\337\335\222c\206ve",
  "\256\202\234x ou\203\310bo\217d\207(\326\215)",
  "\256\350\202\234x\227(\326\215)",
  "\314\364\305\243\334\353\252\271a\374\203\244u\200(\314%d)",
  "\314typ\200mis\327\275 (\314%d)",
  "e\365t\220\315e\231t",
  "\262\232r\323(po\254\236\220n\201-\371m\202\223\227\232r\202g)",
  "\264t\235 \275\204\341\371\207\332l\202e",
  "\347\344\250 \334\207\224 \325e",
  "dupl\322\223\200\042c\366e\331lab\336 (\244u\200%d)",
  "\262\336lip\221s\316\256\325\200\306\243k\224wn",
  "\262\352\233\202a\237\310cl\366\207speci\351\210s",
  "\275\204\341t\274\347\344%l\205\264ce\272\207r\226g\200f\255\252p\341k\227\232r\202g/\245y",
  "po\221\212\333p\204\362e\371\207\320\307c\272\200\213l n\362\227p\204\362e\371s",
  "\303o m\226\220\266\270ts",
  "\217k\224w\337\256\325\200(\326\215)",
  "\256\325\375/\311i\212\207\364 \243\327\275\316\255\234\232\202a\237\256\306\303o sm\213l",
  "\256\335\231\221\201\207\364 \243\327\275",
  "\262l\202\200\304t\202ua\212",
  "\262r\226ge",
  "\262\324bscript\316\251\200\042[ ]\331\354\223\225\207\332\302j\255\335\231\221\201\207\226\205f\255n\362\227\202d\322\375",
  "m\374\206-\335\231\221\201\333\245y\207\350f\374l\220\202i\206\213iz\272",
  "\264ce\272\323\302ximum \373\310\335\231\221\201s",
  "\217\327\275\227c\342s\323b\235c\200(\042}\042)",
  "\232\204\203\310\266bod\220\361\263ou\203\266head\210",
  "\245ys\316\342c\333\301\305\226\205\266\270t\207c\226\243\312pu\236\322 (\326\215)",
  "\217f\202ish\227\363\332be\346\200\352\365il\274\335\222c\206ve",
  "dupl\322\223\200\270t; s\362\200\314\306p\366s\227tw\322e",
  "\266\314\355\243\334\353\252\271a\374\203\244u\200(\326\215)",
  "m\374\206p\370\042#\336se\331\335\222c\206v\305betwe\216 \042#if ... #\216\335f\042",
  "\042#\336seif\331\335\222c\206\353f\242\342w\207\356\042#\336se\331\335\222c\206ve",
  "\373\310\354\226d\207\364\305\243\351\203\376\354\223\225",
  "\266\222\324l\203\360\257\310\354\223\225\230 \350\215",
  "c\226\243\275\226g\200\307\311\227\354\223\225s",
  "\266\314\355\201l\220\334\353\252s\202g\370\360\257(\314%d)",
  "\266\314\355\243\312\252\222f\210\216c\200\314\255\356\256(\314\215)",
  "\326c\226\243\312bo\263 \252\222f\210\216c\200\226\205\356\256(\326\215)",
  "\262\235\212\333\373\307ci\221\332\340#p\235g\302",
  "\235\212\333\373\346\302\203\213\222ad\220\311\272",
  "\235\212\333\373\324pp\225\203wa\207\243\216\261\272",
  "\251\210-\311\227\354\223\255\350\234cl\204\227be\346\200\251\200(\345\230)",
  "\042\325e\273\331\354\223\255\306\262\332\042\345\331\250s",
  "\266\314\350\356\256(\314\215)",
  "#\311\200p\223\371\337\320\232\204\203\361\263 \356\213p\334be\206c \275\204\341\371",
  "\202pu\203l\202\200\303o l\201\257(aft\274\324bs\206tu\212s)",
  "\246n\360x \210r\255\340\376\363\201\316\255\262\266c\213l",
  "m\213\346m\227UTF-8 \216\352d\202g\316\255c\225rupt\227\351le: \211",
  "\266\251\305bo\263 \042\222turn\331\226\205\042\222tur\337<\244ue>\042",
  "\202\304\221\232\216\203\222tur\337typ\305(\256& n\201-\245y)",
  "\217k\224w\337\250\316\255\243\252\347\344\250 \321",
  "\222s\210v\272",
  "\251\210-\311\227\354\223\225\207\226\205na\206\353\345\207\355\243\334\353\315\375",
  "\252\266\255\326\355\201l\220b\336\201\257\303 \252s\202g\370au\303\327\332\321",
  "\315\200\304fl\322t: \201\200\310\376\315\305\306\213\222ad\220a\254gn\227\303 a\224\263\274i\365le\231\360\237\321",
  "\224 \315\305\204\200\311\227f\255\277",
  "\217k\224w\337au\303\327\201\230",
  "\217k\224w\337\315\200\215 f\255au\303\327\201\230",
  "pu\236\322 \301\305\226\205\342c\333\301\305\355\243\334\353\315\305\321",
  "\315\200\301\305\355\243\312\202i\206\213iz\227\321",
  "pu\236\322 \345\207\355\243\222tur\337\245y\207\321",
  "\351rs\203\347\344\340\356\216um\210\223\227lis\203\350\202i\206\213iz\227\321",
  "\262\373\346\327",
  "\256\351\336d\207\361\263 \252\325\200\355\201l\220appe\204 \340\376f\202\333\335\231\221\201",
  "\262\324bscript\316\324bscrip\203\364\305\243\327\275 \256\311i\237\222g\204d\323n\362\227\202d\322\305\321"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*100*/  "cannot read from file: \"%s\"",
/*101*/  "cannot write to file: \"%s\"",
/*102*/  "table overflow: \"%s\"",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*103*/  "insufficient memory",
/*104*/  "incompatible options: \"%s\" versus \"%s\"",
/*105*/  "numeric overflow, exceeding capacity",
/*106*/  "compiled script exceeds the maximum memory size (%ld bytes)",
/*107*/  "too many error messages on one line",
/*108*/  "codepage mapping file not found",
/*109*/  "invalid path: \"%s\"",
/*110*/  "assertion failed: %s",
/*111*/  "user error: %s"
/*112*/  "overlay function \"%s\" exceeds limit by %ld bytes"
#else
  "c\226\243\222a\205from \351le\330",
  "c\226\243writ\200\303 \351le\330",
  "t\261\200ov\210f\342w\330",
  "\202\324ff\322i\216\203mem\225y",
  "\202\352\365a\206\236\200\343\212s\330 v\210\324\207\215",
  "\367m\210\322 ov\210f\342w\316\264ce\272\323cap\341ity",
  "\352\365il\227scrip\203\264ce\272\207\376\302ximum mem\225\220\325\200(%l\205byt\375)",
  "\303o m\226\220\210r\255m\375sag\305\332\201\200l\202e",
  "\352\234pag\200\302pp\323\351\370\243fo\217d",
  "\262p\223h\330",
  "\366s\210\237fail\272: \211",
  "\251\274\210r\225: \211",
  "ov\210la\220\345\230 \264ce\272\207limi\203b\220%l\205byt\375"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters",
/*201*/  "redefinition of constant/macro (symbol \"%s\")",
/*202*/  "number of arguments does not match definition",
/*203*/  "symbol is never used: \"%s\"",
/*204*/  "symbol is assigned a value that is never used: \"%s\"",
/*205*/  "redundant code: constant expression is zero",
/*206*/  "redundant test: constant expression is non-zero",
/*207*/  "unknown #pragma",
/*208*/  "function with tag result used before definition, forcing reparse",
/*209*/  "function \"%s\" should return a value",
/*210*/  "possible use of symbol before initialization: \"%s\"",
/*211*/  "possibly unintended assignment",
/*212*/  "possibly unintended bitwise operation",
/*213*/  "tag mismatch",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"",
/*215*/  "expression has no effect",
/*216*/  "nested comment",
/*217*/  "loose indentation",
/*218*/  "old style prototypes used with optional semicolons",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level",
/*220*/  "expression with tag override must appear between parentheses",
/*221*/  "label name \"%s\" shadows tag name",
/*222*/  "number of digits exceeds rational number precision",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")",
/*225*/  "unreachable code",
/*226*/  "a variable is assigned to itself (symbol \"%s\")",
/*227*/  "more initiallers than array fields",
/*228*/  "length of initialler exceeds size of the array field",
/*229*/  "mixing packed and unpacked array indexing or array assignment",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back",
/*231*/  "state specification on forward declaration is ignored",
/*232*/  "native function lacks a predefined index (symbol \"%s\")",
/*233*/  "state variable \"%s\" shadows a global variable",
/*234*/  "function is deprecated (symbol \"%s\") %s",
/*235*/  "public function lacks forward declaration (symbol \"%s\")",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)",
/*237*/  "recursive function \"%s\"",
/*238*/  "mixing string formats in concatenation"
#else
  "\277 \306tr\240\223\227\303 %\205\275\204\341\371s",
  "\222\311i\237\310\347\226t/\302cro \321",
  "\373\310\270t\207\364\305\243\327\275 \311i\212",
  "\250 \306nev\274\251\272\330",
  "\250 \306a\254gn\227\252\244u\200\263a\203\306nev\274\251\272\330",
  "\222d\217d\344\352\234: \347\344\363\332\306z\210o",
  "\222d\217d\344te\232: \347\344\363\332\306n\201-z\210o",
  "\217k\224w\337#p\235g\302",
  "\266\361\263 \360\257\222\324l\203\251\227be\346\200\311i\212\316\346c\323\222p\204se",
  "\345\230 sho\374\205\222tur\337\252\244ue",
  "po\254\236\200\251\200\310\250 be\346\200\202i\206\213iza\212\330",
  "po\254\236\220\217\202t\216d\227a\254gn\231t",
  "po\254\236\220\217\202t\216d\227bit\361s\200\354a\212",
  "\360\257mis\327\275",
  "po\254\236\220\252\042\347\331\256\314wa\207\202t\216\234d\330",
  "\363\332\334\207\224 effect",
  "ne\232\227\352m\231t",
  "\342os\200\202d\216\360\212",
  "\242\205\232y\370pro\303typ\305\251\227\361\263 \343\212\333sem\322\242\201s",
  "\342c\333\326\215 s\334\364w\207\252\326a\203\252\307c\272\323lev\336",
  "\363\332\361\263 \360\257ov\210rid\200\320appe\204 betwe\216 p\204\216\263\375\375",
  "lab\336 n\362\200\215 s\334\364w\207\360\257n\362e",
  "\373\310\335git\207\264ce\272\207\235\212\333\373\307ci\221\201",
  "\222d\217d\344\042\325e\273\042: \314\325\200\306\213way\2071 \321",
  "\202\234\371m\202\223\200\256\325\200\340\042\325e\273\331\363\332\321",
  "\217\222a\275\261\200\352\234",
  "\252\326\306a\254gn\227\303 its\336f \321",
  "m\225\200\202i\206\213l\210\207\263\356\256\351\336ds",
  "l\216g\263 \310\202i\206\213l\274\264ce\272\207\325\200\310\376\256\351\336d",
  "mix\323p\341k\227\226\205\217p\341k\227\256\202\234x\323\255\256a\254gn\231t",
  "\224 i\365le\231\360\237f\255\315\200\215 \340\345\230\316\224 f\213l-b\341k",
  "\315\200specif\322a\237\332\346w\204\205\234cl\204a\237\306ig\224\222d",
  "na\206\353\266l\341k\207\252\307\311\227\202\234x \321",
  "\315\200\326\215 s\334\364w\207\252g\342b\333\301e",
  "\266\306\234\307c\223\227\321 \211",
  "pu\236\322 \266l\341k\207\346w\204\205\234cl\204a\237\321",
  "\217k\224w\337p\204\362et\274\340\324bs\206tu\237(\202c\225\222c\203#\311\200p\223\371n)",
  "\222cur\221\353\345\230",
  "mix\323\232r\323\346\327\207\340\304c\223\216a\212"
#endif
       };

static char *noticemsg[] = {
#ifdef SCPACK
/*000*/  "*",   /* scpack does not like empty strings */
/*001*/  "did you mean \"%s\"?"
/*002*/  "perhaps you meant to use double quotes"
#else
  "*",
  "d\253you me\226\230?",
  "p\210\334p\207you me\344\303 \251\200\364u\236\200quot\375"
#endif
       };
